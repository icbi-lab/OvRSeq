symbols <- c("BRCA1", "TP53", "EGFR")
ensembl_ids <- getEnsemblIds(symbols, org = "hsapiens_gene_ensembl")
library(biomaRt)
getEnsemblIds <- function(gene_symbols, org = "hsapiens_gene_ensembl") {
mart <- useMart("ensembl", dataset = org)
attributes <- c("ensembl_gene_id", "external_gene_name")
filters <- "external_gene_name"
ensembl_ids <- getBM(attributes = attributes, filters = filters,
values = gene_symbols, mart = mart)
return(ensembl_ids)
}
getGeneLength <- function(ensembl_ids, org = "hsa"){
getGeneLengthAndGCContent(ensembl_ids, "hsa")
}
symbols <- c("BRCA1", "TP53", "EGFR")
ensembl_ids <- getEnsemblIds(symbols, org = "hsapiens_gene_ensembl")
gene_length <- getGeneLength(ensembl_ids$ensembl_gene_id)
library (EDASeq)
getGeneLength <- function(ensembl_ids, org = "hsa"){
getGeneLengthAndGCContent(ensembl_ids, "hsa")
}
gene_length <- getGeneLength(ensembl_ids$ensembl_gene_id)
exons = exonsBy(EnsDb.Hsapiens.v86, by="gene")
BiocManager::install("ensembldb")
library (ensembldb)
exons = exonsBy(EnsDb.Hsapiens.v86, by="gene")
BiocManager::install("EnsDb.Hsapiens.v108")
BiocManager::install("EnsDb.Hsapiens.v99")
BiocManager::install("EnsDb.Hsapiens.v86")
library(EnsDb.Hsapiens.v86)
library(EnsDb.Hsapiens.v86)
exons = exonsBy(EnsDb.Hsapiens.v86, by="gene")
exons = reduce(exons)
len = sum(width(exons))
insect = intersect(rownames(counts_df),names(len))
len
insect = intersect(rownames(ensembl_ids$ensembl_gene_id),names(len))
geneLengths = len[insect]
ensembl_ids$length = counts_df[insect,]
ensembl_ids$length = geneLengths
geneLengths
insect
insect = intersect(ensembl_ids$ensembl_gene_id,names(len))
insect
geneLengths = len[insect]
ensembl_ids$length = geneLengths
count_data <- read.csv("../data/TCGA-OV_RNASeq_raw.csv")
View(count_data)
count_data <- read.csv("../data/TCGA-OV_RNASeq_raw.csv", row.names = 1, check.names = F)
View(count_data)
symbols <- rownames(count_data)
ensembl_ids <- getEnsemblIds(symbols, org = "hsapiens_gene_ensembl")
gene_length <- getGeneLength(ensembl_ids$ensembl_gene_id)
getGeneLength <- function(ensembl_ids, org = "hsa"){
exons = exonsBy(EnsDb.Hsapiens.v86, by="gene")
exons = reduce(exons)
len = sum(width(exons))
insect = intersect(ensembl_ids$ensembl_gene_id,names(len))
geneLengths = len[insect]
ensembl_ids$length = geneLengths
return(ensembl_ids)
}
gene_length <- getGeneLength(ensembl_ids$ensembl_gene_id)
ensembl_ids
exons = exonsBy(EnsDb.Hsapiens.v86, by="gene")
exons = reduce(exons)
len = sum(width(exons))
len
insect = intersect(ensembl_ids$ensembl_gene_id,names(len))
insect
geneLengths = len[insect]
geneLengths
ensembl_ids$length = geneLengths
View(ensembl_ids)
rownames(ensembl_ids) = ensembl_ids$ensembl_gene_id
ensembl_ids[len,]$length = geneLengths
ensembl_ids[insect,]$length = geneLengths
geneLengths
ensembl_ids[insect,]$length
ensembl_ids[insect,]$length = unlist(geneLengths)
unlist(geneLengths)
ensembl_ids[insect,]$length = as.vector(unlist(geneLengths))
ensembl_ids$length = NA
ensembl_ids[insect,]$length = as.vector(unlist(geneLengths))
library(biomaRt)
getEnsemblIds <- function(gene_symbols, org = "hsapiens_gene_ensembl") {
mart <- useMart("ensembl", dataset = org)
attributes <- c("ensembl_gene_id", "external_gene_name")
filters <- "external_gene_name"
ensembl_ids <- getBM(attributes = attributes, filters = filters,
values = gene_symbols, mart = mart)
return(ensembl_ids)
}
library (ensembldb)
library(EnsDb.Hsapiens.v86)
getGeneLength <- function(ensembl_ids, org = "hsa"){
exons = exonsBy(EnsDb.Hsapiens.v86, by="gene")
exons = reduce(exons)
len = sum(width(exons))
insect = intersect(ensembl_ids$ensembl_gene_id,names(len))
geneLengths = len[insect]
rownames(ensembl_ids) = ensembl_ids$ensembl_gene_id
ensembl_ids$length = NA
ensembl_ids[insect,]$length = as.vector(unlist(geneLengths))
return(ensembl_ids)
}
TPMNorm <- function(){
# Create new hnsc object, don't overwrite the previous
hnscTPM <- hnsc
# Divide each gene by transcript length
expPKB <- apply( exprs(hnscTPM), 2, function(x){ x / len$KB } )
# Divide by the transcript length
exprs(hnscTPM) <- apply( expPKB, 2, function(x) { x / sum(x) * 1E6} )
exprs(hnscTPM)[1:5, 1:5]
}
count_data <- read.csv("../data/TCGA-OV_RNASeq_raw.csv", row.names = 1, check.names = F)
symbols <- rownames(count_data)
ensembl_ids <- getEnsemblIds(symbols, org = "hsapiens_gene_ensembl")
gene_length <- getGeneLength(ensembl_ids$ensembl_gene_id)
gene_length <- getGeneLength(ensembl_ids)
gene_length
gene_length$KB <- gene_length$length/1000
gene_length$KB <- gene_length$length/1000
# Create new hnsc object, don't overwrite the previous
countsTPM <- count_data
# Divide each gene by transcript length
expPKB <- apply( countsTPM, 2, function(x){ x / gene_length$KB } )
View(expPKB)
# Create new hnsc object, don't overwrite the previous
countsTPM <- count_data
# Divide each gene by transcript length
countsTPM <- apply( countsTPM, 2, function(x){ x / gene_length$KB } )
# Divide by the transcript length
exprs(countsTPM) <- apply( countsTPM, 2, function(x) { x / sum(x) * 1E6} )
# Divide by the transcript length
countsTPM <- apply( countsTPM, 2, function(x) { x / sum(x) * 1E6} )
rownames(countsTPM) <- rownames(count_data)
lGene <- gene_length[!is.na(gene_length$length),]
gene_length
lGene <- gene_length[!is.na(gene_length$length),]
lGene <- gene_length[!is.na(gene_length$length),]$external_gene_name
count_data <- count_data[lGene,]
library(biomaRt)
getEnsemblIds <- function(gene_symbols, org = "hsapiens_gene_ensembl") {
mart <- useMart("ensembl", dataset = org)
attributes <- c("ensembl_gene_id", "external_gene_name")
filters <- "external_gene_name"
ensembl_ids <- getBM(attributes = attributes, filters = filters,
values = gene_symbols, mart = mart)
return(ensembl_ids)
}
library (ensembldb)
library(EnsDb.Hsapiens.v86)
getGeneLength <- function(ensembl_ids, org = "hsa"){
exons = exonsBy(EnsDb.Hsapiens.v86, by="gene")
exons = reduce(exons)
len = sum(width(exons))
insect = intersect(ensembl_ids$ensembl_gene_id,names(len))
geneLengths = len[insect]
rownames(ensembl_ids) = ensembl_ids$ensembl_gene_id
ensembl_ids$length = NA
ensembl_ids[insect,]$length = as.vector(unlist(geneLengths))
ensembl_ids$KB <- ensembl_ids$length/1000
return(ensembl_ids)
}
TPMNorm <- function(count_data,gene_length){
# Create new hnsc object, don't overwrite the previous
countsTPM <- count_data
# Divide each gene by transcript length
countsTPM <- apply( countsTPM, 2, function(x){ x / gene_length$KB } )
# Divide by the transcript length
countsTPM <- apply( countsTPM, 2, function(x) { x / sum(x) * 1E6} )
rownames(countsTPM) <- rownames(count_data)
}
count_data <- read.csv("../data/TCGA-OV_RNASeq_raw.csv", row.names = 1, check.names = F)
symbols <- rownames(count_data)
ensembl_ids <- getEnsemblIds(symbols, org = "hsapiens_gene_ensembl")
gene_length <- getGeneLength(ensembl_ids)
lGene <- gene_length[!is.na(gene_length$length),]$external_gene_name
count_data <- count_data[lGene,]
TPMNorm(count_data, gene_length)
countsTPM
count_data
count_data <- count_data[lGene,]
gene_length$length
!is.na(gene_length$length)
library(biomaRt)
getEnsemblIds <- function(gene_symbols, org = "hsapiens_gene_ensembl") {
mart <- useMart("ensembl", dataset = org)
attributes <- c("ensembl_gene_id", "external_gene_name")
filters <- "external_gene_name"
ensembl_ids <- getBM(attributes = attributes, filters = filters,
values = gene_symbols, mart = mart)
return(ensembl_ids)
}
library (ensembldb)
library(EnsDb.Hsapiens.v86)
getGeneLength <- function(ensembl_ids, org = "hsa"){
exons = exonsBy(EnsDb.Hsapiens.v86, by="gene")
exons = reduce(exons)
len = sum(width(exons))
insect = intersect(ensembl_ids$ensembl_gene_id,names(len))
geneLengths = len[insect]
rownames(ensembl_ids) = ensembl_ids$ensembl_gene_id
ensembl_ids$length = NA
ensembl_ids[insect,]$length = as.vector(unlist(geneLengths))
ensembl_ids$KB <- ensembl_ids$length/1000
ensembl_ids = ensembl_ids[!is.na(ensembl_ids$length),]
return(ensembl_ids)
}
TPMNorm <- function(count_data,gene_length){
# Create new hnsc object, don't overwrite the previous
countsTPM <- count_data
# Divide each gene by transcript length
countsTPM <- apply( countsTPM, 2, function(x){ x / gene_length$KB } )
# Divide by the transcript length
countsTPM <- apply( countsTPM, 2, function(x) { x / sum(x) * 1E6} )
rownames(countsTPM) <- rownames(count_data)
return(countsTPM)
}
count_data <- read.csv("../data/TCGA-OV_RNASeq_raw.csv", row.names = 1, check.names = F)
symbols <- rownames(count_data)
ensembl_ids <- getEnsemblIds(symbols, org = "hsapiens_gene_ensembl")
gene_length <- getGeneLength(ensembl_ids)
lGene <- gene_length$external_gene_name
count_data <- count_data[lGene,]
TPMNorm(count_data, gene_length)
countsTPM <- TPMNorm(count_data, gene_length)
View(countsTPM)
log2Norm <- function(count_data){
# TPM
count_data_log2 <- count_data
count_data_log2 <- log(exprs(count_data_log2) + 1, 2)
return(count_data_log2)
}
countsLog2TPM <- log2Norm(countsTPM)
log2Norm <- function(count_data){
# TPM
count_data_log2 <- count_data
count_data_log2 <- log(count_data_log2 + 1, 2)
return(count_data_log2)
}
countsLog2TPM <- log2Norm(countsTPM)
View(countsLog2TPM)
width
all_data <- read.csv("../../data/Matrix_log2tpm.csv", check.names = F)
View(all_data)
OV <- read.csv("../data/TCGA-OV_RNASeq_raw.csv", check.names = F)
View(OV)
count_data_log_tpm <- all_data[rownames(OV)]
rownames(OV)
View(OV)
OV <- read.csv("../data/TCGA-OV_RNASeq_raw.csv", check.names = F, row.names = 1)
count_data_log_tpm <- all_data[rownames(OV)]
rownames(OV)
lGene <- intersect(rownames(OV), colnames(all_data))
count_data_log_tpm <- all_data[lGene]
View(count_data_log_tpm)
colnames(all_data)
View(all_data)
lCol_data <- c("AGE","TUMOR_GRADE",
"CLINICAL_STAGE","TUMOR_RESIDUAL_DISEASE","PRIMARY_THERAPY_OUTCOME_SUCCESS",
"PLATINUM_STATUS",       "HRD","HRR_MUT", "BRCA_MUT", "BRCA_METHYL",
"SIG3RATIO", "BRCANESS", "TUMOUR_IMMUNE_PHENOTYPE","MOLECULAR_SUBTYPES",
"OS", "OS_MONTHS",     "PFS","PS_MONTHS""HRD_Score", "HRR_mut", "BRCAness")
lCol_data <- c("AGE","TUMOR_GRADE","CLINICAL_STAGE","TUMOR_RESIDUAL_DISEASE","BRCAness")
OV <- read.csv("../data/TCGA-OV_RNASeq_raw.csv", check.names = F, row.names = 1)
lGene <- intersect(rownames(OV), colnames(all_data))
count_data_log_tpm <- all_data[lGene]
col_data <- all_data[lCol_data]
View(col_data)
se <- SummarizedExperiment(assays = list(log_tpm = as.matrix(count_data_log_tpm)),
colData = as.data.frame(col_data),
rowData = data.frame(gene_symbol = rownames(count_data_log_tpm)))
count_data_log_tpm
s.matrix(count_data_log_tpm)
as.matrix(count_data_log_tpm)
View(count_data_log_tpm)
count_data_log_tpm = t(count_data_log_tpm)
colnames(count_data_log_tpm) = rownames(all_data)
View(all_data)
rownames(all_data)
all_data <- read.csv("../../data/Matrix_log2tpm.csv", check.names = F, row.names = 1)
rownames(all_data)
all_data <- read.csv("../../data/Matrix_log2tpm.csv", check.names = F, row.names = 1)
lCol_data <- c("AGE","TUMOR_GRADE","CLINICAL_STAGE","TUMOR_RESIDUAL_DISEASE","BRCAness")
OV <- read.csv("../data/TCGA-OV_RNASeq_raw.csv", check.names = F, row.names = 1)
lGene <- intersect(rownames(OV), colnames(all_data))
count_data_log_tpm <- all_data[lGene]
col_data <- all_data[lCol_data]
count_data_log_tpm = t(count_data_log_tpm)
colnames(count_data_log_tpm) = rownames(all_data)
as.matrix(count_data_log_tpm)
as.data.frame(col_data)
se <- SummarizedExperiment(assays = list(log_tpm = as.matrix(count_data_log_tpm)),
colData = as.data.frame(col_data),
rowData = data.frame(gene_symbol = colnames(count_data_log_tpm)))
se <- SummarizedExperiment(assays=list(counts=as.matrix(count_data_log_tpm)),
colData=as.data.frame(col_data))
se
save(se, file = "../data/TCGA_OV.rda")
# Load data
load("../data/TCGA_OV.rda")
brcaness_signature <- read.csv("../data/BRCAnessSignature.csv")
all_data <- read.csv("../../data/Matrix_log2tpm.csv", check.names = F, row.names = 1)
lCol_data <- c("AGE","TUMOR_GRADE","CLINICAL_STAGE","TUMOR_RESIDUAL_DISEASE","BRCAness")
OV <- read.csv("../data/TCGA-OV_RNASeq_raw.csv", check.names = F, row.names = 1)
lGene <- intersect(rownames(OV), colnames(all_data))
count_data_log_tpm <- all_data[lGene]
col_data <- all_data[lCol_data]
count_data_log_tpm = t(count_data_log_tpm)
colnames(count_data_log_tpm) = rownames(all_data)
library(SummarizedExperiment)
#Create SummarizedExperiment object
tcga_ov <- SummarizedExperiment(assays=list(counts=as.matrix(count_data_log_tpm)),
colData=as.data.frame(col_data))
save(se, file = "../data/TCGA_OV.rda")
# Load data
load("../data/TCGA_OV.rda")
brcaness_signature <- read.csv("../data/BRCAnessSignature.csv")
View(brcaness_signature)
brcaness_signature <- scan("../data/BRCAnessSignature.csv", what = character())
# Load data
load("../data/TCGA_OV.rda")
# Subset data to intersecting genes
gene_names <- intersect(rownames(count_data_log_tpm), brcaness_signature)
# Subset data to intersecting genes
gene_names <- intersect(rownames(se), brcaness_signature)
count_data_subset <- assay(se)[gene_names, ]
colData(se)
# Subset BRCAness label and remove missing values
brcaness_label <- colData(se)$BRCAness
brcaness_label <- brcaness_label[!is.na(brcaness_label)]
count_data_subset <- count_data_subset[, !is.na(brcaness_label)]
# Train random forest model with 10kfold
library(randomForest)
BiocManager::install("randomForest")
# Train random forest model with 10kfold
library(randomForest)
set.seed(123)
rf_model <- randomForest(t(count_data_subset), brcaness_label, ntree=500, mtry=3, importance=TRUE, proximity=TRUE)
t(count_data_subset)
brcaness_label
rf_model <- randomForest(t(count_data_subset), brcaness_label, ntree=500, mtry=3, importance=TRUE, proximity=TRUE)
table(brcaness_label)
genelist <- read.csv('../../data/gene_signatures.csv',check.names = FALSE)
genelist <- read.csv('../../data/ImmuneSignatures_ssGSEA.csv',check.names = FALSE)
genelist <- as.list(genelists)
View(genelist)
genelist1 <- read.csv('../../data/ImmuneSignatures_ssGSEA.csv',check.names = FALSE)
genelist2 <- read.csv('../../data/ImmuneSignatures_ssGSEA.csv',check.names = FALSE)
View(genelist1)
View(genelist2)
cbind(genelist1, genelist2)
genelist = cbind(genelist1, genelist2)
View(genelist)
genelist1 <- read.csv('../../data/ImmuneSignatures_ssGSEA.csv',check.names = FALSE)
genelist2 <- read.csv('../../data/ImmuneSignaturesZscore.csv',check.names = FALSE)
genelist = cbind(genelist1, genelist2)
ImmuneSignatures_ssGSEA <- read.csv('../../data/ImmuneSignatures_ssGSEA.csv',check.names = FALSE)
ImmuneSignatures_ssGSEA <- as.list(ImmuneSignatures_ssGSEA)
ImmuneSignatures_ssGSEA <- read.csv('../../data/ImmuneSignatures_ssGSEA.csv',check.names = FALSE)
genelist2 <- read.csv('../../data/ImmuneSignaturesZscore.csv',check.names = FALSE)
genelist = cbind(genelist1, genelist2)
immune_signatures <- as.list(ImmuneSignatures_ssGSEA)
usethis::use_data(immune_signatures)
View(genelist)
genelist = immune_signatures
library(OvRSeq)
data("TCGA_OV")
assays(TCGA_OV)
assay(TCGA_OV)
count_data <- assay(se)
se = TCGA_OV
count_data <- assay(se)
results <- gsva(count_data,
genelist,
method = 'ssgsea',
ssgsea.norm=FALSE)
library(GSVA)
BiocManager::install("GSVA")
results <- GSVA::gsva(count_data,
genelist,
method = 'ssgsea',
ssgsea.norm=FALSE)
results
results <- t(results)
View(results)
rbind(colData(se), results)
colData(se)
cbind(colData(se), results)
metadata(se)
